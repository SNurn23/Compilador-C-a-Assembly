
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jul 05 19:40:57 ART 2025
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import Analizador.AST.*;
import java.util.ArrayList;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jul 05 19:40:57 ART 2025
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\007\000\002\003\007\000\002\003\005" +
    "\000\002\004\016\000\002\004\012\000\002\005\004\000" +
    "\002\005\002\000\002\006\003\000\002\006\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\011\005\000\002\011\007\000\002\022" +
    "\003\000\002\010\005\000\002\013\011\000\002\013\015" +
    "\000\002\013\013\000\002\014\011\000\002\015\013\000" +
    "\002\016\015\000\002\020\006\000\002\021\006\000\002" +
    "\017\005\000\002\007\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\010\052\uffff\077\uffff\124\uffff\001\002\000" +
    "\010\052\012\077\010\124\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\074\213\001" +
    "\002\000\004\053\204\001\002\000\010\052\000\077\000" +
    "\124\000\001\002\000\004\061\013\001\002\000\004\101" +
    "\014\001\002\000\004\102\015\001\002\000\004\056\016" +
    "\001\002\000\042\004\ufff8\012\ufff8\013\ufff8\024\ufff8\033" +
    "\ufff8\034\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\052\ufff8" +
    "\057\ufff8\103\ufff8\110\ufff8\116\ufff8\126\ufff8\001\002\000" +
    "\042\004\046\012\021\013\037\024\047\033\050\034\036" +
    "\045\024\046\020\047\032\050\044\052\033\057\035\103" +
    "\040\110\045\116\031\126\053\001\002\000\004\101\172" +
    "\001\002\000\004\047\uffeb\001\002\000\042\004\ufff2\012" +
    "\ufff2\013\ufff2\024\ufff2\033\ufff2\034\ufff2\045\ufff2\046\ufff2" +
    "\047\ufff2\050\ufff2\052\ufff2\057\ufff2\103\ufff2\110\ufff2\116" +
    "\ufff2\126\ufff2\001\002\000\042\004\ufff1\012\ufff1\013\ufff1" +
    "\024\ufff1\033\ufff1\034\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\052\ufff1\057\ufff1\103\ufff1\110\ufff1\116\ufff1\126\ufff1" +
    "\001\002\000\004\047\uffe9\001\002\000\042\004\ufff0\012" +
    "\ufff0\013\ufff0\024\ufff0\033\ufff0\034\ufff0\045\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\052\ufff0\057\ufff0\103\ufff0\110\ufff0\116" +
    "\ufff0\126\ufff0\001\002\000\042\004\ufff9\012\ufff9\013\ufff9" +
    "\024\ufff9\033\ufff9\034\ufff9\045\ufff9\046\ufff9\047\ufff9\050" +
    "\ufff9\052\ufff9\057\ufff9\103\ufff9\110\ufff9\116\ufff9\126\ufff9" +
    "\001\002\000\042\004\ufff7\012\ufff7\013\ufff7\024\ufff7\033" +
    "\ufff7\034\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\052\ufff7" +
    "\057\ufff7\103\ufff7\110\ufff7\116\ufff7\126\ufff7\001\002\000" +
    "\042\004\uffef\012\uffef\013\uffef\024\uffef\033\uffef\034\uffef" +
    "\045\uffef\046\uffef\047\uffef\050\uffef\052\uffef\057\uffef\103" +
    "\uffef\110\uffef\116\uffef\126\uffef\001\002\000\004\047\uffec" +
    "\001\002\000\042\017\uffe5\030\uffe5\031\uffe5\051\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\100\uffe5" +
    "\102\uffe5\103\uffe5\107\uffe5\113\uffe5\127\uffe5\001\002\000" +
    "\004\047\uffed\001\002\000\042\004\ufff5\012\ufff5\013\ufff5" +
    "\024\ufff5\033\ufff5\034\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\052\ufff5\057\ufff5\103\ufff5\110\ufff5\116\ufff5\126\ufff5" +
    "\001\002\000\004\002\ufffa\001\002\000\004\047\uffea\001" +
    "\002\000\004\035\167\001\002\000\042\004\uffee\012\uffee" +
    "\013\uffee\024\uffee\033\uffee\034\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\052\uffee\057\uffee\103\uffee\110\uffee\116\uffee" +
    "\126\uffee\001\002\000\004\103\166\001\002\000\042\004" +
    "\ufff3\012\ufff3\013\ufff3\024\ufff3\033\ufff3\034\ufff3\045\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\052\ufff3\057\ufff3\103\ufff3\110" +
    "\ufff3\116\ufff3\126\ufff3\001\002\000\042\004\ufff4\012\ufff4" +
    "\013\ufff4\024\ufff4\033\ufff4\034\ufff4\045\ufff4\046\ufff4\047" +
    "\ufff4\050\ufff4\052\ufff4\057\ufff4\103\ufff4\110\ufff4\116\ufff4" +
    "\126\ufff4\001\002\000\004\101\153\001\002\000\020\044" +
    "\061\047\032\075\055\076\063\101\057\122\062\130\056" +
    "\001\002\000\004\047\uffe8\001\002\000\004\036\146\001" +
    "\002\000\004\056\136\001\002\000\004\051\066\001\002" +
    "\000\004\047\032\001\002\000\004\101\054\001\002\000" +
    "\020\044\061\047\032\075\055\076\063\101\057\122\062" +
    "\130\056\001\002\000\020\044\061\047\032\075\055\076" +
    "\063\101\057\122\062\130\056\001\002\000\040\017\uffc9" +
    "\030\uffc9\031\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070" +
    "\uffc9\072\uffc9\100\uffc9\102\uffc9\103\uffc9\107\uffc9\113\uffc9" +
    "\127\uffc9\001\002\000\020\044\061\047\032\075\055\076" +
    "\063\101\057\122\062\130\056\001\002\000\040\017\uffda" +
    "\030\uffda\031\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070" +
    "\uffda\072\uffda\100\uffda\102\uffda\103\uffda\107\uffda\113\uffda" +
    "\127\uffda\001\002\000\040\017\uffc7\030\uffc7\031\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\072\uffc7\100\uffc7" +
    "\102\uffc7\103\uffc7\107\uffc7\113\uffc7\127\uffc7\001\002\000" +
    "\040\017\uffc8\030\uffc8\031\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\070\uffc8\072\uffc8\100\uffc8\102\uffc8\103\uffc8\107" +
    "\uffc8\113\uffc8\127\uffc8\001\002\000\040\017\uffca\030\uffca" +
    "\031\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\072" +
    "\uffca\100\uffca\102\uffca\103\uffca\107\uffca\113\uffca\127\uffca" +
    "\001\002\000\036\017\102\030\100\031\072\064\070\065" +
    "\101\066\077\067\074\070\104\072\071\100\073\102\122" +
    "\107\103\113\076\127\075\001\002\000\042\017\uffcb\030" +
    "\uffcb\031\uffcb\051\066\064\uffcb\065\uffcb\066\uffcb\067\uffcb" +
    "\070\uffcb\072\uffcb\100\uffcb\102\uffcb\103\uffcb\107\uffcb\113" +
    "\uffcb\127\uffcb\001\002\000\020\044\061\047\032\075\055" +
    "\076\063\101\057\122\062\130\056\001\002\000\040\017" +
    "\102\030\100\031\072\064\070\065\101\066\077\067\074" +
    "\070\104\072\071\100\073\102\uffe4\103\uffe4\107\103\113" +
    "\076\127\075\001\002\000\020\044\061\047\032\075\055" +
    "\076\063\101\057\122\062\130\056\001\002\000\020\044" +
    "\061\047\032\075\055\076\063\101\057\122\062\130\056" +
    "\001\002\000\020\044\061\047\032\075\055\076\063\101" +
    "\057\122\062\130\056\001\002\000\020\044\061\047\032" +
    "\075\055\076\063\101\057\122\062\130\056\001\002\000" +
    "\020\044\061\047\032\075\055\076\063\101\057\122\062" +
    "\130\056\001\002\000\020\044\061\047\032\075\055\076" +
    "\063\101\057\122\062\130\056\001\002\000\020\044\061" +
    "\047\032\075\055\076\063\101\057\122\062\130\056\001" +
    "\002\000\020\044\061\047\032\075\055\076\063\101\057" +
    "\122\062\130\056\001\002\000\020\044\061\047\032\075" +
    "\055\076\063\101\057\122\062\130\056\001\002\000\020" +
    "\044\061\047\032\075\055\076\063\101\057\122\062\130" +
    "\056\001\002\000\020\044\061\047\032\075\055\076\063" +
    "\101\057\122\062\130\056\001\002\000\020\044\061\047" +
    "\032\075\055\076\063\101\057\122\062\130\056\001\002" +
    "\000\020\044\061\047\032\075\055\076\063\101\057\122" +
    "\062\130\056\001\002\000\040\017\uffd5\030\uffd5\031\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\072\uffd5\100" +
    "\uffd5\102\uffd5\103\uffd5\107\uffd5\113\uffd5\127\uffd5\001\002" +
    "\000\040\017\uffd8\030\uffd8\031\072\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\104\072\071\100\uffd8\102\uffd8\103\uffd8" +
    "\107\uffd8\113\uffd8\127\uffd8\001\002\000\034\031\072\064" +
    "\070\065\101\066\077\067\074\070\104\072\071\100\uffd4" +
    "\102\uffd4\103\uffd4\107\103\113\076\127\uffd4\001\002\000" +
    "\030\017\uffd1\030\uffd1\031\072\070\104\072\071\100\uffd1" +
    "\102\uffd1\103\uffd1\107\103\113\076\127\uffd1\001\002\000" +
    "\034\031\072\064\070\065\101\066\077\067\074\070\104" +
    "\072\071\100\uffd3\102\uffd3\103\uffd3\107\103\113\076\127" +
    "\uffd3\001\002\000\030\017\uffd0\030\uffd0\031\072\070\104" +
    "\072\071\100\uffd0\102\uffd0\103\uffd0\107\103\113\076\127" +
    "\uffd0\001\002\000\040\017\uffd9\030\uffd9\031\072\064\uffd9" +
    "\065\uffd9\066\uffd9\067\uffd9\070\104\072\071\100\uffd9\102" +
    "\uffd9\103\uffd9\107\uffd9\113\uffd9\127\uffd9\001\002\000\040" +
    "\017\102\030\100\031\072\064\070\065\101\066\077\067" +
    "\074\070\104\072\071\100\uffce\102\uffce\103\uffce\107\103" +
    "\113\076\127\uffce\001\002\000\030\017\uffcf\030\uffcf\031" +
    "\072\070\104\072\071\100\uffcf\102\uffcf\103\uffcf\107\103" +
    "\113\076\127\uffcf\001\002\000\040\017\102\030\100\031" +
    "\072\064\070\065\101\066\077\067\074\070\104\072\071" +
    "\100\uffcd\102\uffcd\103\uffcd\107\103\113\076\127\075\001" +
    "\002\000\040\017\uffd6\030\uffd6\031\uffd6\064\uffd6\065\uffd6" +
    "\066\uffd6\067\uffd6\070\uffd6\072\uffd6\100\uffd6\102\uffd6\103" +
    "\uffd6\107\uffd6\113\uffd6\127\uffd6\001\002\000\040\017\uffd7" +
    "\030\uffd7\031\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\072\uffd7\100\uffd7\102\uffd7\103\uffd7\107\uffd7\113\uffd7" +
    "\127\uffd7\001\002\000\030\017\uffd2\030\uffd2\031\072\070" +
    "\104\072\071\100\uffd2\102\uffd2\103\uffd2\107\103\113\076" +
    "\127\uffd2\001\002\000\004\056\123\001\002\000\042\004" +
    "\ufff8\012\ufff8\013\ufff8\024\ufff8\033\ufff8\034\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\052\ufff8\057\ufff8\103\ufff8\110" +
    "\ufff8\116\ufff8\126\ufff8\001\002\000\042\004\046\012\021" +
    "\013\037\024\047\033\050\034\036\045\024\046\020\047" +
    "\032\050\044\052\033\057\125\103\040\110\045\116\031" +
    "\126\053\001\002\000\042\004\uffe0\012\uffe0\013\uffe0\024" +
    "\uffe0\033\uffe0\034\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\052\uffe0\057\uffe0\103\uffe0\110\uffe0\116\uffe0\126\uffe0\001" +
    "\002\000\036\017\102\030\100\031\072\064\070\065\101" +
    "\066\077\067\074\070\104\072\071\100\073\102\127\107" +
    "\103\113\076\127\075\001\002\000\040\017\uffc6\030\uffc6" +
    "\031\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\072" +
    "\uffc6\100\uffc6\102\uffc6\103\uffc6\107\uffc6\113\uffc6\127\uffc6" +
    "\001\002\000\040\017\uffcc\030\uffcc\031\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\072\uffcc\100\uffcc\102\uffcc" +
    "\103\uffcc\107\uffcc\113\uffcc\127\uffcc\001\002\000\006\051" +
    "\133\103\132\001\002\000\042\004\uffe7\012\uffe7\013\uffe7" +
    "\024\uffe7\033\uffe7\034\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\052\uffe7\057\uffe7\103\uffe7\110\uffe7\116\uffe7\126\uffe7" +
    "\001\002\000\020\044\061\047\032\075\055\076\063\101" +
    "\057\122\062\130\056\001\002\000\036\017\102\030\100" +
    "\031\072\064\070\065\101\066\077\067\074\070\104\072" +
    "\071\100\073\103\135\107\103\113\076\127\075\001\002" +
    "\000\042\004\uffe6\012\uffe6\013\uffe6\024\uffe6\033\uffe6\034" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6\057\uffe6" +
    "\103\uffe6\110\uffe6\116\uffe6\126\uffe6\001\002\000\042\004" +
    "\ufff8\012\ufff8\013\ufff8\024\ufff8\033\ufff8\034\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\052\ufff8\057\ufff8\103\ufff8\110" +
    "\ufff8\116\ufff8\126\ufff8\001\002\000\042\004\046\012\021" +
    "\013\037\024\047\033\050\034\036\045\024\046\020\047" +
    "\032\050\044\052\033\057\140\103\040\110\045\116\031" +
    "\126\053\001\002\000\004\126\141\001\002\000\004\101" +
    "\142\001\002\000\020\044\061\047\032\075\055\076\063" +
    "\101\057\122\062\130\056\001\002\000\036\017\102\030" +
    "\100\031\072\064\070\065\101\066\077\067\074\070\104" +
    "\072\071\100\073\102\144\107\103\113\076\127\075\001" +
    "\002\000\004\103\145\001\002\000\042\004\uffdf\012\uffdf" +
    "\013\uffdf\024\uffdf\033\uffdf\034\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\052\uffdf\057\uffdf\103\uffdf\110\uffdf\116\uffdf" +
    "\126\uffdf\001\002\000\020\044\061\047\032\075\055\076" +
    "\063\101\057\122\062\130\056\001\002\000\036\017\102" +
    "\030\100\031\072\064\070\065\101\066\077\067\074\070" +
    "\104\072\071\100\073\103\150\107\103\113\076\127\075" +
    "\001\002\000\042\004\uffdd\012\uffdd\013\uffdd\024\uffdd\033" +
    "\uffdd\034\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd" +
    "\057\uffdd\103\uffdd\110\uffdd\116\uffdd\126\uffdd\001\002\000" +
    "\036\017\102\030\100\031\072\064\070\065\101\066\077" +
    "\067\074\070\104\072\071\100\073\103\152\107\103\113" +
    "\076\127\075\001\002\000\042\004\uffdb\012\uffdb\013\uffdb" +
    "\024\uffdb\033\uffdb\034\uffdb\045\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\052\uffdb\057\uffdb\103\uffdb\110\uffdb\116\uffdb\126\uffdb" +
    "\001\002\000\020\044\061\047\032\075\055\076\063\101" +
    "\057\122\062\130\056\001\002\000\036\017\102\030\100" +
    "\031\072\064\070\065\101\066\077\067\074\070\104\072" +
    "\071\100\073\102\155\107\103\113\076\127\075\001\002" +
    "\000\004\056\156\001\002\000\042\004\ufff8\012\ufff8\013" +
    "\ufff8\024\ufff8\033\ufff8\034\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\052\ufff8\057\ufff8\103\ufff8\110\ufff8\116\ufff8\126" +
    "\ufff8\001\002\000\042\004\046\012\021\013\037\024\047" +
    "\033\050\034\036\045\024\046\020\047\032\050\044\052" +
    "\033\057\160\103\040\110\045\116\031\126\053\001\002" +
    "\000\044\004\uffe3\012\uffe3\013\uffe3\024\uffe3\033\uffe3\034" +
    "\uffe3\040\161\045\uffe3\046\uffe3\047\uffe3\050\uffe3\052\uffe3" +
    "\057\uffe3\103\uffe3\110\uffe3\116\uffe3\126\uffe3\001\002\000" +
    "\006\050\044\056\162\001\002\000\042\004\ufff8\012\ufff8" +
    "\013\ufff8\024\ufff8\033\ufff8\034\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\052\ufff8\057\ufff8\103\ufff8\110\ufff8\116\ufff8" +
    "\126\ufff8\001\002\000\042\004\uffe1\012\uffe1\013\uffe1\024" +
    "\uffe1\033\uffe1\034\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\052\uffe1\057\uffe1\103\uffe1\110\uffe1\116\uffe1\126\uffe1\001" +
    "\002\000\042\004\046\012\021\013\037\024\047\033\050" +
    "\034\036\045\024\046\020\047\032\050\044\052\033\057" +
    "\165\103\040\110\045\116\031\126\053\001\002\000\042" +
    "\004\uffe2\012\uffe2\013\uffe2\024\uffe2\033\uffe2\034\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\052\uffe2\057\uffe2\103\uffe2" +
    "\110\uffe2\116\uffe2\126\uffe2\001\002\000\042\004\ufff6\012" +
    "\ufff6\013\ufff6\024\ufff6\033\ufff6\034\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\050\ufff6\052\ufff6\057\ufff6\103\ufff6\110\ufff6\116" +
    "\ufff6\126\ufff6\001\002\000\004\047\032\001\002\000\004" +
    "\103\171\001\002\000\042\004\uffdc\012\uffdc\013\uffdc\024" +
    "\uffdc\033\uffdc\034\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\052\uffdc\057\uffdc\103\uffdc\110\uffdc\116\uffdc\126\uffdc\001" +
    "\002\000\004\047\032\001\002\000\004\103\174\001\002" +
    "\000\020\044\061\047\032\075\055\076\063\101\057\122" +
    "\062\130\056\001\002\000\036\017\102\030\100\031\072" +
    "\064\070\065\101\066\077\067\074\070\104\072\071\100" +
    "\073\103\176\107\103\113\076\127\075\001\002\000\004" +
    "\047\032\001\002\000\004\102\200\001\002\000\004\056" +
    "\201\001\002\000\042\004\ufff8\012\ufff8\013\ufff8\024\ufff8" +
    "\033\ufff8\034\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\052" +
    "\ufff8\057\ufff8\103\ufff8\110\ufff8\116\ufff8\126\ufff8\001\002" +
    "\000\042\004\046\012\021\013\037\024\047\033\050\034" +
    "\036\045\024\046\020\047\032\050\044\052\033\057\203" +
    "\103\040\110\045\116\031\126\053\001\002\000\042\004" +
    "\uffde\012\uffde\013\uffde\024\uffde\033\uffde\034\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\052\uffde\057\uffde\103\uffde\110" +
    "\uffde\116\uffde\126\uffde\001\002\000\006\065\205\130\206" +
    "\001\002\000\006\047\207\055\210\001\002\000\010\052" +
    "\ufffc\077\ufffc\124\ufffc\001\002\000\004\064\212\001\002" +
    "\000\004\064\211\001\002\000\010\052\ufffe\077\ufffe\124" +
    "\ufffe\001\002\000\010\052\ufffd\077\ufffd\124\ufffd\001\002" +
    "\000\004\115\214\001\002\000\004\103\215\001\002\000" +
    "\004\052\216\001\002\000\004\061\217\001\002\000\004" +
    "\101\220\001\002\000\004\102\221\001\002\000\004\056" +
    "\222\001\002\000\042\004\ufff8\012\ufff8\013\ufff8\024\ufff8" +
    "\033\ufff8\034\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\052" +
    "\ufff8\057\ufff8\103\ufff8\110\ufff8\116\ufff8\126\ufff8\001\002" +
    "\000\042\004\046\012\021\013\037\024\047\033\050\034" +
    "\036\045\024\046\020\047\032\050\044\052\033\057\224" +
    "\103\040\110\045\116\031\126\053\001\002\000\004\002" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\002\003\004\004\001\001\000\004\003" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\016\001\001\000\032\006\025\010\040\011" +
    "\026\012\051\013\033\014\042\015\041\016\021\017\027" +
    "\020\022\021\024\022\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\150\010\057\022\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\130\001\001\000\002\001\001\000\010" +
    "\007\063\010\057\022\064\001\001\000\010\007\127\010" +
    "\057\022\064\001\001\000\002\001\001\000\010\007\125" +
    "\010\057\022\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\066\010\057\022\064\001" +
    "\001\000\002\001\001\000\010\007\120\010\057\022\064" +
    "\001\001\000\010\007\117\010\057\022\064\001\001\000" +
    "\010\007\116\010\057\022\064\001\001\000\010\007\115" +
    "\010\057\022\064\001\001\000\010\007\114\010\057\022" +
    "\064\001\001\000\010\007\113\010\057\022\064\001\001" +
    "\000\010\007\112\010\057\022\064\001\001\000\010\007" +
    "\111\010\057\022\064\001\001\000\010\007\110\010\057" +
    "\022\064\001\001\000\010\007\107\010\057\022\064\001" +
    "\001\000\010\007\106\010\057\022\064\001\001\000\010" +
    "\007\105\010\057\022\064\001\001\000\010\007\104\010" +
    "\057\022\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\123" +
    "\001\001\000\032\006\025\010\040\011\026\012\051\013" +
    "\033\014\042\015\041\016\021\017\027\020\022\021\024" +
    "\022\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\133\010\057\022\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\136\001\001" +
    "\000\032\006\025\010\040\011\026\012\051\013\033\014" +
    "\042\015\041\016\021\017\027\020\022\021\024\022\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\142\010\057\022\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\146\010\057\022" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\153\010\057\022" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\156\001\001\000\032\006\025\010\040\011\026\012" +
    "\051\013\033\014\042\015\041\016\021\017\027\020\022" +
    "\021\024\022\050\001\001\000\002\001\001\000\004\013" +
    "\162\001\001\000\004\005\163\001\001\000\002\001\001" +
    "\000\032\006\025\010\040\011\026\012\051\013\033\014" +
    "\042\015\041\016\021\017\027\020\022\021\024\022\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\172\022\050\001\001\000\002\001\001\000\010\007" +
    "\174\010\057\022\064\001\001\000\002\001\001\000\006" +
    "\010\176\022\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\201\001\001\000\032\006\025\010\040" +
    "\011\026\012\051\013\033\014\042\015\041\016\021\017" +
    "\027\020\022\021\024\022\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\222\001\001\000\032\006" +
    "\025\010\040\011\026\012\051\013\033\014\042\015\041" +
    "\016\021\017\027\020\022\021\024\022\050\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= Parent_a EXPRESION Parent_c 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= False 
            {
              Nodo RESULT =null;
		 RESULT = new LiteralBooleanoNodo(false); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= True 
            {
              Nodo RESULT =null;
		 RESULT = new LiteralBooleanoNodo(true); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= STRING_LITERAL 
            {
              Nodo RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new LiteralStringNodo(str.toString()); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= Numero 
            {
              Nodo RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new LiteralNumeroNodo(num.toString()); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= IDENTIFICADOR_NODO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		IdentificadorNodo id = (IdentificadorNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = id; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= Negador EXPRESION 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionUnariaNodo("!", e); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION O_logico EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("||", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION Y_logico EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("&&", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION MenorIgual EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("<=", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= EXPRESION MayorIgual EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo(">=", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION MenorQue EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("<", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= EXPRESION MayorQue EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo(">", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= EXPRESION Diferente EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("!=", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= EXPRESION ComparadorIgual EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("==", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= EXPRESION Modulo EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("%", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION Division EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("/", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION Multiplicacion EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("*", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION Resta EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("-", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION Suma EXPRESION 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new ExpresionBinariaNodo("+", e1, e2); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_RETURN ::= Return EXPRESION P_coma 
            {
              RetornoNodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new RetornoNodo(e); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETURN",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_READ ::= Cin DobleMayor IDENTIFICADOR_NODO P_coma 
            {
              LeerNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		IdentificadorNodo id = (IdentificadorNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new LeerNodo(new ArrayList<IdentificadorNodo>(Collections.singletonList(id))); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_READ",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_PRINT ::= Cout DobleMenor EXPRESION P_coma 
            {
              ImprimirNodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new ImprimirNodo(new ArrayList<Nodo>(Collections.singletonList(e))); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_PRINT",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_FOR ::= For Parent_a ASIGNACION P_coma EXPRESION P_coma ASIGNACION Parent_c Llave_a SENTENCIAS Llave_c 
            {
              ParaNodo RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)).right;
		Nodo init = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		SecuenciaNodo body = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new ParaNodo(init, cond, inc, body); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_DO_WHILE ::= Do Llave_a SENTENCIAS Llave_c While Parent_a EXPRESION Parent_c P_coma 
            {
              HacerMientrasNodo RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).right;
		SecuenciaNodo body = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		 RESULT = new HacerMientrasNodo(body, cond); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_WHILE ::= While Parent_a EXPRESION Parent_c Llave_a SENTENCIAS Llave_c 
            {
              MientrasNodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		SecuenciaNodo body = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new MientrasNodo(cond, body); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_IF ::= If Parent_a EXPRESION Parent_c Llave_a SENTENCIAS Llave_c Else SENTENCIA_IF 
            {
              SiNodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).value;
		int thenBodyleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).left;
		int thenBodyright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).right;
		SecuenciaNodo thenBody = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int elseIfleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int elseIfright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		SiNodo elseIf = (SiNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 SecuenciaNodo elseBlock = new SecuenciaNodo(); elseBlock.agregarSentencia(elseIf); RESULT = new SiNodo(cond, thenBody, elseBlock); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_IF ::= If Parent_a EXPRESION Parent_c Llave_a SENTENCIAS Llave_c Else Llave_a SENTENCIAS Llave_c 
            {
              SiNodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)).value;
		int thenBodyleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).left;
		int thenBodyright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).right;
		SecuenciaNodo thenBody = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		SecuenciaNodo elseBody = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new SiNodo(cond, thenBody, elseBody); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_IF ::= If Parent_a EXPRESION Parent_c Llave_a SENTENCIAS Llave_c 
            {
              SiNodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;
		int thenBodyleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int thenBodyright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		SecuenciaNodo thenBody = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new SiNodo(cond, thenBody, null); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= IDENTIFICADOR_NODO Igual EXPRESION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		IdentificadorNodo id = (IdentificadorNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new AsignacionNodo(id, e); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IDENTIFICADOR_NODO ::= Identificador 
            {
              IdentificadorNodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = new IdentificadorNodo(id.toString()); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_NODO",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= TIPO_DATO IDENTIFICADOR_NODO Igual EXPRESION P_coma 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).right;
		IdentificadorNodo id = (IdentificadorNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new DeclaracionNodo(((IdentificadorNodo)tipo).getNombre(), id, e); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= TIPO_DATO IDENTIFICADOR_NODO P_coma 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		IdentificadorNodo id = (IdentificadorNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new DeclaracionNodo(((IdentificadorNodo)tipo).getNombre(), id, null); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_DATO ::= Bool 
            {
              Nodo RESULT =null;
		 RESULT = new IdentificadorNodo("bool"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_DATO ::= Float 
            {
              Nodo RESULT =null;
		 RESULT = new IdentificadorNodo("float"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_DATO ::= Double 
            {
              Nodo RESULT =null;
		 RESULT = new IdentificadorNodo("double"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO_DATO ::= Char 
            {
              Nodo RESULT =null;
		 RESULT = new IdentificadorNodo("char"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO_DATO ::= _String 
            {
              Nodo RESULT =null;
		 RESULT = new IdentificadorNodo("string"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPO_DATO ::= Int 
            {
              Nodo RESULT =null;
		 RESULT = new IdentificadorNodo("int"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= P_coma 
            {
              Nodo RESULT =null;
		 RESULT = null; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA_RETURN 
            {
              Nodo RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		RetornoNodo ret = (RetornoNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = ret; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA_READ 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		LeerNodo r = (LeerNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = r; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA_PRINT 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		ImprimirNodo p = (ImprimirNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = p; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA_FOR 
            {
              Nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		ParaNodo f = (ParaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = f; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA_DO_WHILE 
            {
              Nodo RESULT =null;
		int dwleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int dwright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		HacerMientrasNodo dw = (HacerMientrasNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = dw; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA_WHILE 
            {
              Nodo RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		MientrasNodo w = (MientrasNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = w; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA_IF 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		SiNodo i = (SiNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = i; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ASIGNACION P_coma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = a; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = d; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS ::= 
            {
              SecuenciaNodo RESULT =null;
		 RESULT = new SecuenciaNodo(); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              SecuenciaNodo RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		SecuenciaNodo seq = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 seq.agregarSentencia(s); RESULT = seq; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= DIRECTIVAS Int Main Parent_a Parent_c Llave_a SENTENCIAS Llave_c 
            {
              ProgramaNodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		SecuenciaNodo s = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new ProgramaNodo(s); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= DIRECTIVAS Using Namespace Std P_coma Int Main Parent_a Parent_c Llave_a SENTENCIAS Llave_c 
            {
              ProgramaNodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		SecuenciaNodo s = (SecuenciaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		 RESULT = new ProgramaNodo(s); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DIRECTIVA ::= Numeral Include STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIRECTIVA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DIRECTIVA ::= Numeral Include MenorQue Identificador MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIRECTIVA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DIRECTIVA ::= Numeral Include MenorQue Iostream MayorQue 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIRECTIVA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DIRECTIVAS ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIRECTIVAS",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DIRECTIVAS ::= DIRECTIVAS DIRECTIVA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DIRECTIVAS",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		ProgramaNodo start_val = (ProgramaNodo)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

